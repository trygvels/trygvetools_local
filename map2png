#!/Users/svalheim/anaconda3/bin/python
#-*- mode: python -*-


import sys
if len(sys.argv[1:])<1:
   print("Usage: map2pdf [filename1.fits] ([filename2.fits] ...)")
   sys.exit()

if (sys.argv[-1])=="pol":
   pol=True
   
import matplotlib
#matplotlib.use('agg')
import matplotlib.pyplot as plt
import healpy as hp
import matplotlib.cm as cm
import numpy as np
import matplotlib.colors as col
import re
from matplotlib import rcParams, rc

# USE THIS STYLE! Remember savefig.dpi : 300
#plt.style.use(u"trygveplot")

rcParams['backend'] = 'pdf' #
rcParams['legend.fancybox'] = True
rcParams['lines.linewidth'] = 2
rcParams['savefig.dpi'] = 300
rcParams['axes.linewidth'] = 1
rcParams['axes.titlesize'] = 'x-large'
rcParams['axes.labelsize'] = 10 #'large'
rcParams['legend.fontsize'] = 10 #
rcParams['xtick.labelsize'] = 10 #
rcParams['ytick.labelsize'] = 10 #
rcParams['xtick.major.pad'] = 6 #
rcParams['ytick.major.pad'] = 6 #
rcParams['font.size'] = 10 #
#rcParams['font.family'] = 'sans-serif' #
#rcParams['font.sans-serif'] = 'FreeSans' #


# use of Sans Serif also in math mode
rc('text.latex', preamble=r'\usepackage{sfmath}')


def cm2inch(cm):
    return cm*0.393701


if pol==True
   maps = sys.argv[1:-1]
   pollist=[1,2]
else:
   maps = sys.argv[1:]
   pollist=[0]

for polt in pollist:
   for map_ in maps:
      print("Plotting " + str(map_))
      #######################
      ####   READ MAP   #####
      #######################
      map_=str(map_)
      scale = 1 # Scale by a factor of
      filename = str(map_)
      
      m = hp.ma(hp.read_map(filename,field=(polt)))*scale
      #m = np.log10(0.5*(m+np.sqrt(4.+m*m))) # Allows for linear scale around the galactic band, but logarithmic at high latitudes
      #m = np.maximum(np.minimum(m,vmax),vmin)
      nside = hp.npix2nside(len(m))
      logscale = False
      #######################
      #### Auto-param   #####
      #######################
      
      # AMPLITUDE MAPS
      if "casmb" in map_:
        print("Plotting CMB map")

        if polt == 1:
           title = "$A_{\mathrm{CMB}}$ Q"
        elif polt == 2:
           title = "$A_{\mathrm{CMB}}$ U"
        else:
           title = "$A_{\mathrm{CMB}}$"
                
        if pol==True:
           vmin = -2
           vmax = 2
        else:
           vmin = -300
           vmax = 300
           
        tmin = str(vmin)
        tmax = str(vmax)

        unit = r"$\mu\mathrm{K}_{\mathrm{CMB}}$"

        coltype = 2
        color = "/Users/svalheim/work/trygvetools_local/parchment1.dat"

      elif "chisq" in map_:
        if polt == 1:
           title = r"$\chi^2$ Q"

        elif polt == 2:
           title = r"$\chi^2$ U"

        else:
           title = r"$\chi^2$"
           
                
        if pol==True:
           vmin = 0
           vmax = 32
        else:
           vmin = 0
           vmax = 76


        tmin = str(vmin)
        tmax = str(vmax)

        
        print("Plotting chisq with vmax = " + str(vmax))

        unit = ""
        coltype = 0
        color = "none"

      elif "synch_" in map_:
        if polt == 1:
           title = r"$A_{\mathrm{s}}$ Q"
        elif polt == 2:
           title = r"$A_{\mathrm{s}}$ U"
        else:
           title = r"$A_{\mathrm{s}}$"

        if pol==True:
           vmin = -1.69
           vmax = 1.69
           tmin = str(-50)
           tmax = str(50)
           logscale=True
        else:
           vmin = 1
           vmax = np.log10(100)
           tmin = str(10)
           tmax = str(100)
           logscale=True
           
        unit = r"$\mu\mathrm{K}_{\mathrm{RJ}}$ @ 40 GHz"

        coltype = 0
        color = "green"

      elif "ff_" in map_:
        vmin = 0 #0
        vmax = np.log10(10000) #1000
        tmin = str(0)
        tmax = str(r'$10^4$')

        unit = r"$\mu\mathrm{K}_{\mathrm{RJ}}$ @ 40 GHz"
        title = r"$A_{\mathrm{ff}}$"
        logscale=True
        coltype = 0
        color = "Navy"

      elif "dust_c" in map_:
        if polt == 1:
           title = r"$A_{\mathrm{d}}$ Q"
        elif polt == 2:
           title = r"$A_{\mathrm{d}}$ U"
        else:
           title = r"$A_{\mathrm{d}}$"

        if pol==True:
           vmin = -2
           vmax = 2
           tmin = str(-100)
           tmax = str(100)
           logscale=True
        else:
           logscale=True
           vmin = 0
           vmax = 4 #1000
           tmin = str(0)
           tmax = str(r"$10^4$")



        unit = r"$\mu\mathrm{K}_{\mathrm{RJ}}$ @ 545 GHz"
        coltype=True
        color = "gist_heat"

      elif "ame1_c" in map_ or "ame_" in map_:
        vmin = 1 #0
        vmax = np.log10(10000) #300
        tmin = str(10)
        tmax = str(r'$10^4$')

        unit = r"$\mu\mathrm{K}_{\mathrm{RJ}}$ @ 22 GHz"
        title = r"$A_{\mathrm{ame}}$"
        logscale=True
        coltype=0
        color="DarkOrange"

      elif "co-100" in map_ or "co10" in map_: 
        vmin = 0
        vmax = 2
        tmin = str(0)
        tmax = str(100)

        unit = r"$\mathrm{K}_{\mathrm{RJ}}\, \mathrm{km}/\mathrm{s}$"
        title = "$A_{\mathrm{CO10}}$"
        logscale=True
        coltype=1
        color="gray" 


      elif "co-217" in map_ or "co21" in map_:
        vmin = 0
        vmax = 2
        tmin = str(0)
        tmax = str(100)

        unit = r"$\mathrm{K}_{\mathrm{RJ}}\, \mathrm{km}/\mathrm{s}$"
        title = "$A_{\mathrm{CO21}}$"
        logscale=True
        coltype=1
        color="gray" 

      elif "co-353" in map_ or "co32" in map_:
        vmin = 0
        vmax = 2 #0.5
        tmin = str(0)
        tmax = str(100)

        unit = r"$\mathrm{K}_{\mathrm{RJ}}\, \mathrm{km}/\mathrm{s}$"
        title = "$A_{\mathrm{CO32}}$"
        logscale=True
        coltype=1
        color="gray" 

      elif "hcn_c" in map_:
        vmin = -14 
        vmax = -10
        tmin = str(0.01)
        tmax = str(100)

        unit = r"$\mathrm{K}_{\mathrm{RJ}}\, \mathrm{km}/\mathrm{s}$"
        title = "$A_{\mathrm{HCN}}$"
        logscale=True
        coltype=1
        color="gray" 
        
        # SPECTRAL PARAMETER MAPS
      elif "ame1_nu" in map_:
        vmin = 17
        vmax = 23
        tmin = str(vmin)
        tmax = str(vmax)

        unit = "GHz"
        title = r"$\nu_{ame}$"
        coltype=1
        color="bone" 
        
      elif "dust_Td" in map_:
        if polt == 1:
           title = r"$T_d$ Q"
        elif polt == 2:
           title = r"$T_d$ U"
        else:
           title = r"$T_d$"

        vmin = 14
        vmax = 30
        tmin = str(vmin)
        tmax = str(vmax)

        unit = r"$\mathrm{K}$"
        coltype=1
        color="bone" 
       
      elif "dust_beta" in map_:
        if polt == 1:
           title = r"$\beta_d$ Q"
        elif polt == 2:
           title = r"$\beta_d$ U"
        else:
           title = r"$\beta_d$"
           
        vmin = 0
        vmax = 1000
        tmin = str(vmin)
        tmax = str(vmax)

        unit = ""
        coltype=1
        color="bone" 
       
      elif "synch_beta" in map_:
        if polt == 1:
           title = r"$\beta_s$ Q"
        elif polt == 2:
           title = r"$\beta_s$ U"
        else:
           title = r"$\beta_s$"
           
        vmin = -4
        vmax = -1.5
        tmin = str(vmin)
        tmax = str(vmax)

        unit = ""
        coltype=1
        color="bone" 
       
      elif "ff_T_e" in map_:
        vmin = 5000
        vmax = 8000
        unit = r"$\mathrm{K}$"
        title = r"$T_{e}$"
        coltype=1
        color="bone" 
       

        # RESIDUAL MAPS
        
      elif "residual_" in map_:
        print("Plotting residual map")
        if polt == 1:
           title = str(re.findall(r'residual_(.*?)_',map_)[0]) + " Q"
        elif polt == 2:
           title = str(re.findall(r'residual_(.*?)_',map_)[0]) + " U"
        else:
           title = re.findall(r'residual_(.*?)_',map_)[0]
 

        vmin = -10
        vmax = 10
        tmin = str(vmin)
        tmax = str(vmax)
       
        unit =  r"$\mu\mathrm{K}$"
        coltype=2
        color="/Users/svalheim/work/trygvetools_local/parchment1.dat"
        
        if "545" in map_:
            vmin = -1e2
            vmax = 1e2
            tmin = str(vmin)
            tmax = str(vmax)
            unit = r"$\mathrm{MJy/sr}$"
        elif "857" in map_:
            vmin = -0.05 #-1e4
            vmax = 0.05 #1e4
            tmin = str(vmin)
            tmax = str(vmax)

            unit = r"$\mathrm{MJy/sr}$"
      else:
         print("Map not recognized, plotting with min and max values")
         vmin = np.min(m)
         vmax = np.max(m)
         tmin = str(vmin)
         tmax = str(vmax)
         unit = ""
         title = ""
         continue

      if logscale==True:
         m = np.log10(0.5*(m+np.sqrt(4.+m*m)))
         m = np.maximum(np.minimum(m,vmax),vmin)
         
         ##########################
         #### Plotting Params #####
         ##########################

      outfile = map_.replace(".fits", "")
      ticks      = [vmin, vmax]           # Location of colobar ticks
      ticklabels = [tmin, tmax] # Color bar tick labels
      unit       = unit
      freq       = title        # Short name upper right
      colorbar   = 1            # Colorbar on
      title      = 0            # title off
      titletext  = ""           # title text
      use_mask   = False

      # Image size -  ratio is always 1/2
      xsize = 2000
      ysize = int(xsize/2.)

      ######################
      #### COLOR SETUP #####
      ######################

      from matplotlib.colors import ListedColormap
      
      if coltype == 0:
         startcolor = 'black'
         midcolor = color
         endcolor = 'white'
         if color == "none" :
            colombi1_cmap = col.LinearSegmentedColormap.from_list('own2',[startcolor,endcolor])
         else:
            colombi1_cmap = col.LinearSegmentedColormap.from_list('own2',[startcolor,midcolor,endcolor])
      elif coltype == 1:
         colombi1_cmap = plt.get_cmap(color)
      elif coltype == 2:
         colombi1_cmap = ListedColormap(np.loadtxt(color)/255.)

         #colombi1_cmap.set_bad("gray") # color of missing pixels
         #colombi1_cmap.set_under("white") # color of background, necessary if you want to use
         # using directly matplotlib instead of mollview has higher quality output

      theta = np.linspace(np.pi, 0, ysize)
      phi = np.linspace(-np.pi, np.pi, xsize)
      longitude = np.radians(np.linspace(-180, 180, xsize))
      latitude = np.radians(np.linspace(-90, 90, ysize))

      # project the map to a rectangular matrix xsize x ysize
      PHI, THETA = np.meshgrid(phi, theta)
      grid_pix = hp.ang2pix(nside, THETA, PHI)

      if use_mask:
         # mask
         m.mask = np.logical_not(hp.read_map("mask_T0.941_P10uK_v3_survey.fits",1))
         grid_mask = m.mask[grid_pix]
         grid_map = np.ma.MaskedArray(m[grid_pix], grid_mask)
      else:
         grid_map = m[grid_pix]

      from matplotlib.projections.geo import GeoAxes
      class ThetaFormatterShiftPi(GeoAxes.ThetaFormatter):
         """Shifts labelling by pi
         Shifts labelling from -180,180 to 0-360"""
         def __call__(self, x, pos=None):
            if x != 0:
               x *= -1
            if x < 0:
               x += 2*np.pi
            return GeoAxes.ThetaFormatter.__call__(self, x, pos)

      #for cmap, colormaptag in [(None, ''), (colombi1_cmap, "colombi1_")]:
      cmap = colombi1_cmap
      colormaptag = "colombi1_"

      for width in [8.8, 12.0, 18.0]:
         fig = plt.figure(figsize=(cm2inch(width), cm2inch(width/2.)))
         # matplotlib is doing the mollveide projection

         #ax = fig.add_subplot(figure_rows, figure_columns, lol, projection='mollweide')
         ax = fig.add_subplot(111,projection='mollweide')

         # remove white space around the image
         #plt.subplots_adjust(left=0.01, right=0.99, top=0.95, bottom=0.01)

         # rasterized makes the map bitmap while the labels remain vectorial
         # flip longitude to the astro convention
         image = plt.pcolormesh(longitude[::-1], latitude, grid_map, vmin=vmin, vmax=vmax, rasterized=True, cmap=cmap)

         # graticule
         ax.set_longitude_grid(60)
         ax.xaxis.set_major_formatter(ThetaFormatterShiftPi(60))

         if width < 10:
            ax.set_latitude_grid(45)
            ax.set_longitude_grid_ends(90)

         if colorbar == 1:
            # colorbar
            #cb = fig.colorbar(image, orientation='horizontal', shrink=.4, pad=0.08, ticks=ticks)
            cb = fig.colorbar(image, orientation='horizontal', shrink=.3, pad=0.08, ticks=ticks)
            cb.ax.set_xticklabels(ticklabels)
            cb.ax.xaxis.set_label_text(unit)
            cb.ax.tick_params(axis='x', direction='in')
            cb.ax.xaxis.labelpad = -11 #4
            # workaround for issue with viewers, see colorbar docstring
            cb.solids.set_edgecolor("face")

            #ax.tick_params(axis='x', labelsize=10)
         #ax.tick_params(axis='y', labelsize=10)

         # remove longitude tick labels
         ax.xaxis.set_ticklabels([])
         # remove horizontal grid
         ax.xaxis.set_ticks([])
         ax.yaxis.set_ticklabels([])
         ax.yaxis.set_ticks([])

         if title:
            plt.title(titletext)
            
         plt.grid(True)
         if width > 12.:
            plt.text(6.,  1.3, r"%s" % freq, ha='center', va='center', fontsize=8)
         elif width == 12.:
            plt.text(6.,  1.3, r"%s" % freq, ha='center', va='center', fontsize=7)
         else:
            plt.text(6.,  1.3, r"%s" % freq, ha='center', va='center', fontsize=6)
        #plt.text(5., -1.2, r"%s" % yr, ha='center', va='center')

         plt.tight_layout()
         plt.savefig(outfile+"_pol"+str(polt)+"_w"+str(int(width))+".png", bbox_inches='tight',  pad_inches=0.02)
         plt.close()
        
